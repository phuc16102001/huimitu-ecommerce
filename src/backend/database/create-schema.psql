DROP TYPE IF EXISTS "role_type" CASCADE;
DROP TYPE IF EXISTS "gender_type" CASCADE;
DROP TYPE IF EXISTS "state_type" CASCADE;

DROP TABLE IF EXISTS "account" CASCADE;
DROP TABLE IF EXISTS "province" CASCADE;
DROP TABLE IF EXISTS "district" CASCADE;
DROP TABLE IF EXISTS "ward" CASCADE;
DROP TABLE IF EXISTS "shipping_address" CASCADE;
DROP TABLE IF EXISTS "category" CASCADE;
DROP TABLE IF EXISTS "payment" CASCADE;
DROP TABLE IF EXISTS "product" CASCADE;
DROP TABLE IF EXISTS "product_image" CASCADE;
DROP TABLE IF EXISTS "product_variant" CASCADE;
DROP TABLE IF EXISTS "order" CASCADE;
DROP TABLE IF EXISTS "order_state" CASCADE;
DROP TABLE IF EXISTS "order_variant" CASCADE;
DROP TABLE IF EXISTS "cart" CASCADE;
DROP TABLE IF EXISTS "cart_variant" CASCADE;
DROP TABLE IF EXISTS "review" CASCADE;
DROP TABLE IF EXISTS "shipping_provider" CASCADE;
DROP TABLE IF EXISTS "voucher" CASCADE;

----------------------- CREATE TABLE -------------------------

CREATE TYPE role_type AS ENUM('user','admin');
CREATE TYPE gender_type AS ENUM('male','female');
CREATE TYPE state_type AS ENUM('pending','shipping','cancel','success', 'reviewed');

CREATE TABLE "account" (
  "email" varchar PRIMARY KEY,
  "password" varchar,
  "phone" varchar UNIQUE,
  "fullname" varchar,
  "birthday" date,
  "gender" gender_type,
  "avatar_path" varchar,
  "avatar_filename" varchar,
  "role" role_type,
  "verified" bool DEFAULT false,
  "token" char(64)
);

CREATE TABLE "province" (
  "id" int PRIMARY KEY,
  "province_name" varchar 
);

CREATE TABLE "district" (
  "id" int PRIMARY KEY,
  "district_name" varchar,
  "province_id" int
);

CREATE TABLE "ward" (
  "id" int PRIMARY KEY,
  "ward_name" varchar,
  "district_id" int
);

CREATE TABLE "shipping_address" (
  "id" SERIAL PRIMARY KEY,
  "email" varchar,
  "province_id" int,
  "district_id" int,
  "ward_id" int,
  "address" varchar,
  "receiver_phone" varchar,
  "receiver_name" varchar
);

CREATE TABLE "category" (
  "id" SERIAL PRIMARY KEY,
  "parent_id" int,
  "category_name" varchar,
  "description" varchar
);

CREATE TABLE "payment" (
  "id" SERIAL PRIMARY KEY,
  "provider" varchar
);

CREATE TABLE "product" (
  "id" SERIAL PRIMARY KEY,
  "product_name" varchar NOT NULL,
  "category_id" int,
  "description" varchar,
  "avg_rating" real DEFAULT 0 CHECK(avg_rating>=0) CHECK(avg_rating<=5),
  "count_rating" int NOT NULL DEFAULT 0 CHECK(count_rating>=0),
  "min_price" int DEFAULT 0,
  "max_price" int DEFAULT 0,
  "stock" int DEFAULT 0,
  "created_time" timestamp DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE "product_image" (
  "id" SERIAL PRIMARY KEY,
  "product_id" int,
  "path" varchar NOT NULL,
  "filename" varchar
);

CREATE TABLE "product_variant" (
  "id" SERIAL PRIMARY KEY,
  "product_id" int,
  "variant_name" varchar,
  "price" real NOT NULL,
  "discount_price" real,
  "stock" int NOT NULL
);

CREATE TABLE "order" (
  "id" varchar PRIMARY KEY,
  "email" varchar,
  "created_time" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "payment_id" int NOT NULL,
  "shipping_address_id" int NOT NULL,
  "total" real NOT NULL,
  "shipping_provider_id" int NOT NULL,
  "shipping_price" real NOT NULL,
  "voucher_id" int
);

CREATE TABLE "order_variant" (
  "order_id" varchar,
  "variant_id" int,
  "quantity" int NOT NULL,
  "variant_price" real NOT NULL,
  PRIMARY KEY ("order_id", "variant_id")
);

CREATE TABLE "cart" (
  "id" SERIAL PRIMARY KEY,
  "email" varchar,
  "total" int NOT NULL DEFAULT 0 CHECK("total">=0),
  "count" int NOT NULL DEFAULT 0 CHECK("count">=0)
);

CREATE TABLE "cart_variant" (
  "cart_id" int,
  "variant_id" int,
  "quantity" int NOT NULL DEFAULT 1 CHECK("quantity">=1),
  PRIMARY KEY ("cart_id", "variant_id")
);

CREATE TABLE "review" (
  "product_variant_id" int,
  "order_id" varchar,
  "rating" int,
  "comment" varchar,
  PRIMARY KEY ("product_variant_id", "order_id")
);

CREATE TABLE "shipping_provider" (
  "id" SERIAL PRIMARY KEY,
  "shipping_provider_name" varchar
);

CREATE TABLE "order_state" (
  "order_id" varchar,
  "state" state_type NOT NULL,
  "created_time" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY ("order_id", "state")
);

CREATE TABLE "voucher" (
  "id" SERIAL PRIMARY KEY,
  "voucher_code" varchar UNIQUE NOT NULL,
  "discount" real NOT NULL,
  "minimum_price" real,
  "start_date" timestamp NOT NULL,
  "end_date" timestamp
);

----------------------- CONSTRAINT -------------------------

ALTER TABLE "district" ADD FOREIGN KEY ("province_id") REFERENCES "province"("id");
ALTER TABLE "ward" ADD FOREIGN KEY ("district_id") REFERENCES "district"("id");

ALTER TABLE "shipping_address" ADD FOREIGN KEY("province_id") REFERENCES "province"("id");
ALTER TABLE "shipping_address" ADD FOREIGN KEY("district_id") REFERENCES "district"("id");
ALTER TABLE "shipping_address" ADD FOREIGN KEY("ward_id") REFERENCES "ward"("id");
ALTER TABLE "shipping_address" ADD FOREIGN KEY ("email") REFERENCES "account" ("email");

ALTER TABLE "order" ADD FOREIGN KEY ("email") REFERENCES "account" ("email");

ALTER TABLE "category" ADD FOREIGN KEY ("parent_id") REFERENCES "category" ("id");

ALTER TABLE "product" ADD FOREIGN KEY ("category_id") REFERENCES "category" ("id");
ALTER TABLE "product_image" ADD FOREIGN KEY ("product_id") REFERENCES "product" ("id") ON DELETE CASCADE;
ALTER TABLE "product_variant" ADD FOREIGN KEY ("product_id") REFERENCES "product" ("id") ON DELETE CASCADE;

ALTER TABLE "review" ADD FOREIGN KEY ("product_variant_id") REFERENCES "product_variant" ("id");
ALTER TABLE "review" ADD FOREIGN KEY ("order_id") REFERENCES "order" ("id");

ALTER TABLE "order_variant" ADD FOREIGN KEY ("variant_id") REFERENCES "product_variant" ("id");
ALTER TABLE "cart_variant" ADD FOREIGN KEY ("variant_id") REFERENCES "product_variant" ("id");

ALTER TABLE "order" ADD FOREIGN KEY ("payment_id") REFERENCES "payment" ("id");
ALTER TABLE "order" ADD FOREIGN KEY ("shipping_address_id") REFERENCES "shipping_address" ("id");
ALTER TABLE "order" ADD FOREIGN KEY ("shipping_provider_id") REFERENCES "shipping_provider" ("id");
ALTER TABLE "order" ADD FOREIGN KEY ("voucher_id") REFERENCES "voucher" ("id");

ALTER TABLE "order_variant" ADD FOREIGN KEY ("order_id") REFERENCES "order" ("id");
ALTER TABLE "order_state" ADD FOREIGN KEY ("order_id") REFERENCES "order" ("id");

ALTER TABLE "cart" ADD FOREIGN KEY ("email") REFERENCES "account" ("email") ON DELETE CASCADE;
ALTER TABLE "cart_variant" ADD FOREIGN KEY ("cart_id") REFERENCES "cart" ("id");

------------------------- FUNCTION ---------------------------

--- Update price and stock of a product after add variant
CREATE OR REPLACE FUNCTION update_min_max_price_stock_product() RETURNS trigger AS
$$
BEGIN
  -- Update prices
  UPDATE "product" AS p
  SET ("min_price", "max_price") = (
    SELECT min(least("price", "discount_price")), max(greatest("price", "discount_price"))
    FROM "product_variant" AS v
    WHERE v.product_id = COALESCE(NEW.product_id, OLD.product_id)
  )
  WHERE p.id = COALESCE(NEW.product_id, OLD.product_id);

  -- Update stock
  UPDATE "product" AS p
  SET ("stock") = (
    SELECT sum("stock")
    FROM "product_variant" AS v
    WHERE v.product_id = COALESCE(NEW.product_id, OLD.product_id)
  )
  WHERE p.id = COALESCE(NEW.product_id, OLD.product_id);

  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Update avg_rating and count_rating of a product after add review
CREATE OR REPLACE FUNCTION update_avg_count_rating_product() RETURNS trigger AS
$$
BEGIN
  UPDATE "product" AS p
  SET ("avg_rating", "count_rating") = (
    SELECT cast(sum(r.rating) AS DECIMAL) / count(*), count(*)
    FROM "review" AS r JOIN "product_variant" AS pv 
    ON pv.id = COALESCE(NEW.product_variant_id, OLD.product_variant_id)
    WHERE pv.product_id = p.id
  )
  WHERE p.id = (
    SELECT pv.product_id FROM product_variant AS pv
    WHERE pv.id = COALESCE(NEW.product_variant_id, OLD.product_variant_id)
  );
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Create cart related to the account
CREATE OR REPLACE FUNCTION create_cart_for_account() RETURNS trigger AS
$$
BEGIN
  INSERT INTO "cart"("email") VALUES (NEW.email);
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Update total price of cart
CREATE OR REPLACE FUNCTION update_total_count_cart() RETURNS trigger AS
$$
BEGIN
  UPDATE "cart" AS c
  SET (total, count) = (
    SELECT COALESCE(0,SUM(cv.quantity * LEAST(pv.price,pv.discount_price))), COALESCE(0,SUM(cv.quantity))
    FROM "cart_variant" AS cv
    JOIN "product_variant" AS pv
    ON cv.variant_id = pv.id
  ) 
  WHERE c.id = COALESCE(OLD.cart_id,NEW.cart_id);
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Update total price of order
CREATE OR REPLACE FUNCTION update_total_order() RETURNS trigger AS
$$
BEGIN
  UPDATE "order" AS o
  SET (total) = (
    SELECT COALESCE(0,SUM(ov.quantity * LEAST(pv.price,pv.discount_price)))
    FROM "order_variant" AS ov
    JOIN "product_variant" AS pv
    ON ov.variant_id = pv.id
  ) 
  WHERE o.id = COALESCE(OLD.order_id,NEW.order_id);
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Create pending state for order
CREATE OR REPLACE FUNCTION create_order_pending_state() RETURNS trigger AS
$$
BEGIN
  INSERT INTO "order_state"("order_id","state") VALUES(NEW.id, 'pending');
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';
-------------------------- TRIGGER ------------------------------

--- Update min, max, stock of product after change variant
CREATE TRIGGER insert_variant
AFTER INSERT OR UPDATE OR DELETE
ON "product_variant"
FOR EACH ROW
EXECUTE PROCEDURE update_min_max_price_stock_product();

--- Update rating count and avg when review changes
CREATE TRIGGER insert_review
AFTER INSERT OR UPDATE OR DELETE
ON "review"
FOR EACH ROW
EXECUTE PROCEDURE update_avg_count_rating_product();

--- Create cart after insert new account
CREATE TRIGGER insert_account
AFTER INSERT 
ON "account"
FOR EACH ROW
EXECUTE PROCEDURE create_cart_for_account();

--- Update total price after change cart variants
CREATE TRIGGER update_cart
AFTER INSERT OR UPDATE OR DELETE
ON "cart_variant"
FOR EACH ROW 
EXECUTE PROCEDURE update_total_count_cart();

--- Create status for order
CREATE TRIGGER create_order
AFTER INSERT
ON "order"
FOR EACH ROW
EXECUTE PROCEDURE create_order_pending_state();

--- Insert variant for order
CREATE TRIGGER insert_order_variant
AFTER INSERT OR UPDATE OR DELETE
ON "order_variant"
FOR EACH ROW
EXECUTE PROCEDURE update_total_order();

----------------------- INSERT DATA -------------------------

--- Admin password: admin123
--- User password: user123
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('phuc16102001@gmail.com','MzkwNyY5ODhlOTFhNTM1MGMwN2E4NGViMThhOTljNzhjN2Q2Mzg3OTE3YzJmNzRiODU4MDU1Y2ZiMjE5YmE0NTA4NWU2','0707953475','Đỗ Vương Phúc','2001-10-16','male','admin',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('thanhhoang4869@gmail.com','NTgzMyYzNGQ3NWIzY2UwMTM4MDFjNmFiYjQ5ZjM0YzU5NDYwZGFjN2U4ZDc3MTU0ODNjZWMwZWI0ZjIyNzE1YmNmY2Zj','0933442607','Hoàng Như Thanh','2001-07-26','female','admin',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('nnhatdu@gmail.com','YTIwZCYyYWUyZmMxYmIyZDUwYzFlNDhkMzRkZjk5ZTZmYzg4YjM4ZDAwYzliNTU0MGViMWRiNWU4OTg4YjdmZjA4ZTE0','0987654321','Ngô Nhật Du',NULL,'female','admin',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('longmydu@gmail.com','ZDYxYyZhZjY5YmNhMGQ2YjkzMzZhNjZhYzk4MDBhMTcwZTE0OGQ5ZDRlYmRkMjA0NDE2ODc1MmIyOTAyN2NlNGU5OWM0','0987654322','Long Mỹ Du',NULL,'female','admin',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('nhkduy201@gmail.com','OThiNCYyZGQyNTA0N2Y0YmRhZTYwN2I2ZTc3YjA5OTAzZWJkY2QyZDdkOTE3ZDUxOTYxNTU4ODlhYjRiNDllNTZmNjE2','0987654323','Nguyễn Hoàng Khánh Duy',NULL,'male','admin',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('user1@gmail.com','MGU0ZCZkMTljZWM3ZDRlNGRlZGQxYTRkYTdkYThmM2YzNWU2YTE1OTlkZmUyN2JhM2EyYjI5MzNkZWVjMzQ3OWRlYjVm','0987654324','User 1',NULL,'female','user',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('user2@gmail.com','OTgwMiZkYjhjMWQwZGFhOGJhNjBiMDJhOWUyZTVkOWI1MTkwMWI2N2MxZGYyYzJhMDE0ZjQ5MTVjMjczMWIxMjFlYTQ3','0987654325','User 2',NULL,'male','user',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('user3@gmail.com','OWQ3MiY5NjcxODhlNGU4Njk3YzkxMjc1ZmY0YTgwYTcxYmQzM2VjNDMzNGUzYTE2MGM5NzVjZDYyMWFhNTQ2YWMzNGM2','0987654326','User 3',NULL,'female','user',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('user4@gmail.com','NjM2NyZiM2FiYTI5OWFiN2RjN2IzNjVlMjIyNWI3ZjZkMDhmOTg5ZjY5M2ZhZDgyMDkyMGEyNWZkODRmMTI1OTg2OTI3','0987654327','User 4',NULL,'male','user',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('user5@gmail.com','NGI5MCZkZjQxYzY5YzE4ZjJhOGY4MDExOTU1NTI3MzNhY2Y3MzliYzc3Yjg5Y2Q2NDBhOWJmMjBmYWFiNDY3Y2Y2YWMw','0987654328','User 5',NULL,'female','user',true);

INSERT INTO "payment"("provider") VALUES('paypal');
INSERT INTO "payment"("provider") VALUES('momo');
INSERT INTO "payment"("provider") VALUES('cod');
INSERT INTO "payment"("provider") VALUES('nowpayment');

INSERT INTO "category"("parent_id","category_name","description") VALUES(NULL,'Dụng cụ trang trí',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES(NULL,'Dụng cụ làm bánh',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('1','Túi và đầu chiết',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('1','Giấy nến',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('1','Dụng cụ trang trí bánh kem',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('1','Khuôn bánh',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('1','Dụng cụ trang trí bánh quy',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('2','Khay nướng',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('2','Khuôn bánh muffin',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('2','Khuôn tạo hình',NULL);

INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Túi trang trí (10 cái) ','3',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Đầu chiết Open Star','3',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Túi trang trí (10 cái) có thể tái sử dụng (10 cái)','3',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Đầu chiết hình bông hoa','3',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Bộ đầu chiết Wilson','3',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Giấy nến chống đầu (10 miếng)','4',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Giấy nến chống dầu chấm bi (10 miếng)','4',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Giấy nến bánh lễ (10 miếng)','4',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Dao chà láng kem','5',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Dụng cụ xẻ bánh kem','5',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Thanh tre','5',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Dao lật bánh','5',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Dao cắt bánh','5',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Khuôn bánh tròn','8',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Khuôn bánh chống dính hình trái tim','10',NULL,'0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Khay cuộn bánh không dính','9',NULL,'0','0');

INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('1','Túi trang trí (10 cái) đen','20000',NULL,'3');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('1','Túi trang trí (10 cái) trắng','25000',NULL,'5');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('1','Túi trang trí (10 cái) xanh','23000',NULL,'2');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('2','Đầu chiết Open Star','35000',NULL,'10');

INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('3','Túi trang trí có thể tái sử dụng (10 cái)','32000',NULL,'20');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('4','Đầu chiết hình bông hoa','15000',NULL,'15');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('5','Bộ đầu chiết Wilson','15000',NULL,'30');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('6','Giấy nến chống đầu (10 miếng)','20000',NULL,'5');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('7','Giấy nến chống dầu chấm bi (10 miếng)','21000',NULL,'8');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('8','Giấy nến bánh lễ (10 miếng)','20000',NULL,'50');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('9','Dao chà láng kem','30000',NULL,'20');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('10','Dụng cụ xẻ bánh kem','32000',NULL,'15');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('11','Thanh tre','20000',NULL,'3');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('12','Dao lật bánh','20000',NULL,'5');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('13','Dao cắt bánh','20000',NULL,'19');

INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('14','Khuôn bánh tròn 6" x 2"','180000','110000','10');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('14','Khuôn bánh tròn 12" x 2"','350000','160000','5');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('14','Khuôn bánh tròn 16" x 2"','270000','100000','4');

INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('15','Khuôn bánh chống dính hình trái tim','230000',NULL,'41');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('16','Khay cuộn bánh không dính','120000',NULL,'29');

INSERT INTO "shipping_provider"("id","shipping_provider_name") VALUES(1, 'Ahamove');

-- INSERT INTO "shipping_address"("id","email","province_id","district_id","ward_id","address","receiver_phone","receiver_name") VALUES(1,'nhkduy201@gmail.com',1,1,1,'123','01234567899','Nguyễn Văn A');

-- INSERT INTO "voucher"("id","voucher_code","discount","minimum_price","start_date","end_date") VALUES(1,'123',10,100,'2023-01-01',NULL);

-- INSERT INTO "order"("id","email","created_time","payment_id","shipping_address_id","total","shipping_provider_id","shipping_price","voucher_id") VALUES(1, 'nhkduy201@gmail.com', '2023-01-01', 1, 1, 100, 1, 10, 1);
-- INSERT INTO "order"("id","email","created_time","payment_id","shipping_address_id","total","shipping_provider_id","shipping_price","voucher_id") VALUES(2, 'nhkduy201@gmail.com', '2023-02-02', 1, 1, 100, 1, 10, 1);
-- INSERT INTO "order"("id","email","created_time","payment_id","shipping_address_id","total","shipping_provider_id","shipping_price","voucher_id") VALUES(3, 'nhkduy201@gmail.com', '2023-03-03', 1, 1, 100, 1, 10, 1);

-- INSERT INTO "review"("product_variant_id","order_id","rating","comment") VALUES(1,1,5,'This is the first comment!');
-- INSERT INTO "review"("product_variant_id","order_id","rating","comment") VALUES(1,2,0,'This is the second comment!');
-- INSERT INTO "review"("product_variant_id","order_id","rating","comment") VALUES(1,3,3,'This is the third comment!');