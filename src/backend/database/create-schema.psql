DROP TYPE IF EXISTS "role_type" CASCADE;
DROP TYPE IF EXISTS "gender_type" CASCADE;
DROP TYPE IF EXISTS "state_type" CASCADE;

DROP TABLE IF EXISTS "account" CASCADE;
DROP TABLE IF EXISTS "province" CASCADE;
DROP TABLE IF EXISTS "district" CASCADE;
DROP TABLE IF EXISTS "ward" CASCADE;
DROP TABLE IF EXISTS "shipping_address" CASCADE;
DROP TABLE IF EXISTS "category" CASCADE;
DROP TABLE IF EXISTS "payment" CASCADE;
DROP TABLE IF EXISTS "product" CASCADE;
DROP TABLE IF EXISTS "product_image" CASCADE;
DROP TABLE IF EXISTS "product_variant" CASCADE;
DROP TABLE IF EXISTS "order" CASCADE;
DROP TABLE IF EXISTS "order_state" CASCADE;
DROP TABLE IF EXISTS "order_variant" CASCADE;
DROP TABLE IF EXISTS "cart" CASCADE;
DROP TABLE IF EXISTS "cart_variant" CASCADE;
DROP TABLE IF EXISTS "review" CASCADE;
DROP TABLE IF EXISTS "voucher" CASCADE;
DROP TABLE IF EXISTS "voucher_user" CASCADE;
DROP TABLE IF EXISTS "frequent_product" CASCADE;

----------------------- CREATE TABLE -------------------------

CREATE TYPE role_type AS ENUM('user','admin');
CREATE TYPE gender_type AS ENUM('male','female');
CREATE TYPE state_type AS ENUM('init', 'pending','shipping','cancel','success');

CREATE TABLE "account" (
  "email" varchar PRIMARY KEY,
  "password" varchar,
  "phone" varchar UNIQUE,
  "fullname" varchar,
  "birthday" date DEFAULT CURRENT_TIMESTAMP,
  "gender" gender_type DEFAULT 'male',
  "avatar_path" varchar,
  "avatar_filename" varchar,
  "role" role_type,
  "verified" bool DEFAULT false,
  "token" char(64)
);

CREATE TABLE "province" (
  "id" int PRIMARY KEY,
  "province_name" varchar NOT NULL
);

CREATE TABLE "district" (
  "id" int PRIMARY KEY,
  "district_name" varchar NOT NULL,
  "province_id" int NOT NULL
);

CREATE TABLE "ward" (
  "id" int PRIMARY KEY,
  "ward_name" varchar NOT NULL,
  "district_id" int NOT NULL
);

CREATE TABLE "shipping_address" (
  "id" SERIAL PRIMARY KEY,
  "email" varchar NOT NULL,
  "province_id" int NOT NULL,
  "district_id" int NOT NULL,
  "ward_id" int NOT NULL,
  "address" varchar NOT NULL,
  "lat" real NOT NULL,
  "long" real NOT NULL
);

CREATE TABLE "category" (
  "id" SERIAL PRIMARY KEY,
  "parent_id" int,
  "category_name" varchar,
  "description" varchar
);

CREATE TABLE "payment" (
  "id" SERIAL PRIMARY KEY,
  "provider" varchar
);

CREATE TABLE "product" (
  "id" SERIAL PRIMARY KEY,
  "product_name" varchar NOT NULL,
  "category_id" int,
  "description" varchar,
  "avg_rating" real DEFAULT 0 CHECK(avg_rating>=0) CHECK(avg_rating<=5),
  "count_rating" int NOT NULL DEFAULT 0 CHECK(count_rating>=0),
  "min_price" bigint DEFAULT 0,
  "max_price" bigint DEFAULT 0,
  "stock" int DEFAULT 0,
  "created_time" timestamp DEFAULT CURRENT_TIMESTAMP,
  "soft_delete" boolean NOT NULL DEFAULT false,
  "product_fts" tsvector
);

CREATE TABLE "product_image" (
  "id" SERIAL PRIMARY KEY,
  "product_id" int,
  "path" varchar NOT NULL,
  "filename" varchar
);

CREATE TABLE "product_variant" (
  "id" SERIAL PRIMARY KEY,
  "product_id" int,
  "variant_name" varchar,
  "price" bigint NOT NULL,
  "discount_price" bigint,
  "stock" int NOT NULL
);

CREATE TABLE "cart" (
  "id" SERIAL PRIMARY KEY,
  "email" varchar,
  "total" int NOT NULL DEFAULT 0 CHECK("total">=0),
  "count" int NOT NULL DEFAULT 0 CHECK("count">=0)
);

CREATE TABLE "cart_variant" (
  "cart_id" int,
  "variant_id" int,
  "quantity" int NOT NULL DEFAULT 1 CHECK("quantity">=1),
  PRIMARY KEY ("cart_id", "variant_id")
);

CREATE TABLE "review" (
  "product_variant_id" int,
  "order_id" varchar,
  "rating" int NOT NULL CHECK("rating">=1),
  "comment" varchar,
  "created_time" timestamp DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY ("product_variant_id", "order_id")
);

CREATE TABLE "order" (
  "id" varchar PRIMARY KEY,
  "email" varchar,
  "receiver_name" varchar,
  "receiver_phone" varchar,
  "created_time" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "payment_id" int NOT NULL,
  "shipping_address_id" int NOT NULL,
  "total_price" bigint NOT NULL DEFAULT 0,
  "discount_price" bigint NOT NULL DEFAULT 0,
  "shipping_price" bigint NOT NULL DEFAULT 0,
  "final_price" bigint NOT NULL DEFAULT 0,
  "reviewed" bool NOT NULL DEFAULT false
);

CREATE TABLE "order_variant" (
  "order_id" varchar,
  "variant_id" int,
  "quantity" int NOT NULL,
  "variant_price" bigint NOT NULL DEFAULT 0,
  PRIMARY KEY ("order_id", "variant_id")
);

CREATE TABLE "order_state" (
  "order_id" varchar,
  "state" state_type NOT NULL,
  "created_time" timestamp NOT NULL DEFAULT clock_timestamp(),
  PRIMARY KEY ("order_id", "state", "created_time")
);

CREATE TABLE "voucher" (
  "voucher_code" varchar PRIMARY KEY,
  "percentage_discount" real NOT NULL,
  "minimum_price" bigint NOT NULL,
  "maximum_discount_price" bigint NOT NULL,
  "start_date" date NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "maximum_usage" int NOT NULL DEFAULT 1,
  "current_usage" int NOT NULL DEFAULT 0,
  "end_date" date NOT NULL
);

CREATE TABLE "voucher_user" (
  "voucher_code" varchar,
  "email" varchar,
  PRIMARY KEY("voucher_code", "email")
);

CREATE TABLE "frequent_product" (
  "support" float,
  "confident" float,
  "consequence_id" int,
  "product_id" int,
  PRIMARY KEY ("product_id", "consequence_id")
);

----------------------- CONSTRAINT -------------------------

ALTER TABLE "district" ADD FOREIGN KEY ("province_id") REFERENCES "province"("id");
ALTER TABLE "ward" ADD FOREIGN KEY ("district_id") REFERENCES "district"("id");

ALTER TABLE "shipping_address" ADD FOREIGN KEY("province_id") REFERENCES "province"("id");
ALTER TABLE "shipping_address" ADD FOREIGN KEY("district_id") REFERENCES "district"("id");
ALTER TABLE "shipping_address" ADD FOREIGN KEY("ward_id") REFERENCES "ward"("id");
ALTER TABLE "shipping_address" ADD FOREIGN KEY ("email") REFERENCES "account" ("email");

ALTER TABLE "order" ADD FOREIGN KEY ("email") REFERENCES "account" ("email");

ALTER TABLE "category" ADD FOREIGN KEY ("parent_id") REFERENCES "category" ("id");

ALTER TABLE "product" ADD FOREIGN KEY ("category_id") REFERENCES "category" ("id");
ALTER TABLE "product_image" ADD FOREIGN KEY ("product_id") REFERENCES "product" ("id");
ALTER TABLE "product_variant" ADD FOREIGN KEY ("product_id") REFERENCES "product" ("id");

ALTER TABLE "review" ADD FOREIGN KEY ("product_variant_id") REFERENCES "product_variant" ("id");
ALTER TABLE "review" ADD FOREIGN KEY ("order_id") REFERENCES "order" ("id");

ALTER TABLE "order_variant" ADD FOREIGN KEY ("variant_id") REFERENCES "product_variant" ("id");
ALTER TABLE "cart_variant" ADD FOREIGN KEY ("variant_id") REFERENCES "product_variant" ("id");

ALTER TABLE "order" ADD FOREIGN KEY ("payment_id") REFERENCES "payment" ("id");
ALTER TABLE "order" ADD FOREIGN KEY ("shipping_address_id") REFERENCES "shipping_address" ("id");

ALTER TABLE "voucher_user" ADD FOREIGN KEY ("voucher_code") REFERENCES "voucher" ("voucher_code") ON DELETE CASCADE;
ALTER TABLE "voucher_user" ADD FOREIGN KEY ("email") REFERENCES "account" ("email") ON DELETE CASCADE;

ALTER TABLE "order_variant" ADD FOREIGN KEY ("order_id") REFERENCES "order" ("id");
ALTER TABLE "order_state" ADD FOREIGN KEY ("order_id") REFERENCES "order" ("id");

ALTER TABLE "cart" ADD FOREIGN KEY ("email") REFERENCES "account" ("email") ON DELETE CASCADE;
ALTER TABLE "cart_variant" ADD FOREIGN KEY ("cart_id") REFERENCES "cart" ("id")  ON DELETE CASCADE;

ALTER TABLE "frequent_product" ADD FOREIGN KEY("product_id") REFERENCES "product"("id");
ALTER TABLE "frequent_product" ADD FOREIGN KEY("consequence_id") REFERENCES "product"("id");

----------------------- FULL TEXT SEARCH -------------------------
CREATE INDEX idx_product_fts
ON product 
USING GIN(product_fts);

------------------------- FUNCTION ---------------------------

--- Aggregate multiple rows of text search vector
CREATE OR REPLACE AGGREGATE tsvector_agg(tsvector) (
   STYPE = pg_catalog.tsvector,
   SFUNC = pg_catalog.tsvector_concat,
   INITCOND = ''
);

--- Remove accent of Vietnamese
CREATE OR REPLACE FUNCTION vn_unaccent(text) RETURNS text AS
$$
BEGIN
	RETURN lower(
		translate(
			$1,
			'¹²³ÀÁẢẠÂẤẦẨẬẪÃÄÅÆàáảạâấầẩẫậãäåæĀāĂẮẰẲẴẶăắằẳẵặĄąÇçĆćĈĉĊċČčĎďĐđÈÉẸÊẾỀỄỆËèéẹêềếễệëĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨÌÍỈỊÎÏìíỉịîïĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłÑñŃńŅņŇňŉŊŋÒÓỎỌÔỐỒỔỖỘỐỒỔỖỘƠỚỜỞỠỢÕÖòóỏọôốồổỗộơớờỡợởõöŌōŎŏŐőŒœØøŔŕŖŗŘřßŚśŜŝŞşŠšŢţŤťŦŧÙÚỦỤƯỪỨỬỮỰÛÜùúủụûưứừửữựüŨũŪūŬŭŮůŰűŲųŴŵÝýÿỳŶŷŸŹźŻżŽžёЁ',
			'123AAAAAAAAAAAAAAaaaaaaaaaaaaaaAaAAAAAAaaaaaaAaCcCcCcCcCcDdDdEEEEEEEEEeeeeeeeeeEeEeEeEeEeGgGgGgGgHhHhIIIIIIIiiiiiiiIiIiIiIiIiJjKkkLlLlLlLlLlNnNnNnNnnNnOOOOOOOOOOOOOOOOOOOOOOOooooooooooooooooooOoOoOoEeOoRrRrRrSSsSsSsSsTtTtTtUUUUUUUUUUUUuuuuuuuuuuuuUuUuUuUuUuUuWwYyyyYyYZzZzZzeE'
		)
);
END
$$ 
LANGUAGE 'plpgsql' IMMUTABLE;

--- Update price and stock of a product after add variant
CREATE OR REPLACE FUNCTION update_min_max_price_stock_product() RETURNS trigger AS
$$
BEGIN
  -- Update prices
  UPDATE "product" AS p
  SET ("min_price", "max_price") = (
    SELECT min(least("price", "discount_price")), max(greatest("price", "discount_price"))
    FROM "product_variant" AS v
    WHERE v.product_id = COALESCE(NEW.product_id, OLD.product_id)
  )
  WHERE p.id = COALESCE(NEW.product_id, OLD.product_id);

  -- Update stock
  UPDATE "product" AS p
  SET ("stock") = (
    SELECT sum("stock")
    FROM "product_variant" AS v
    WHERE v.product_id = COALESCE(NEW.product_id, OLD.product_id)
  )
  WHERE p.id = COALESCE(NEW.product_id, OLD.product_id);

  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Update avg_rating and count_rating of a product after add review
CREATE OR REPLACE FUNCTION update_rating_product_order_review() RETURNS trigger AS
$$
BEGIN
  --- Update product rating
  UPDATE "product" AS p
  SET ("avg_rating", "count_rating") = (
    SELECT cast(sum(r.rating) AS DECIMAL) / count(*), count(*)
    FROM "review" AS r JOIN "product_variant" AS pv 
    ON pv.id = COALESCE(NEW.product_variant_id, OLD.product_variant_id)
    WHERE pv.product_id = p.id
  )
  WHERE p.id = (
    SELECT pv.product_id FROM product_variant AS pv
    WHERE pv.id = COALESCE(NEW.product_variant_id, OLD.product_variant_id)
  );

  --- Update order review state
  UPDATE "order" AS o
  SET "reviewed" = true
  WHERE o.id = NEW.order_id;

  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Create cart related to the account
CREATE OR REPLACE FUNCTION create_cart_for_account() RETURNS trigger AS
$$
BEGIN
  INSERT INTO "cart"("email") VALUES (NEW.email);
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Update total price of cart
CREATE OR REPLACE FUNCTION update_total_count_cart() RETURNS trigger AS
$$
BEGIN
  UPDATE "cart" AS c
  SET (total, count) = (
    SELECT COALESCE(SUM(cv.quantity * LEAST(pv.price,pv.discount_price)),0), COALESCE(SUM(cv.quantity),0)
    FROM "cart_variant" AS cv
    JOIN "product_variant" AS pv
    ON cv.variant_id = pv.id
    WHERE cv.cart_id = COALESCE(OLD.cart_id,NEW.cart_id)
  ) 
  WHERE c.id = COALESCE(OLD.cart_id,NEW.cart_id);
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Create pending state for order
CREATE OR REPLACE FUNCTION create_order_pending_state() RETURNS trigger AS
$$
BEGIN
  INSERT INTO "order_state"("order_id","state") VALUES(NEW.id, 'init');
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Update the FTS data on product table on change of product data and variant data
CREATE OR REPLACE FUNCTION update_product_fts_column() RETURNS trigger AS
$$
  DECLARE update_product_id integer:=0;
BEGIN
  --- Get product ID need to update

  IF TG_TABLE_NAME = 'product' THEN
    update_product_id := COALESCE(NEW.id, OLD.id);
  ELSIF TG_TABLE_NAME = 'product_variant' THEN
    update_product_id := COALESCE(NEW.product_id, OLD.product_id);
  END IF;

  UPDATE "product"
  SET "product_fts" = (
    --- Aggregate all result
    SELECT tsvector_agg(subquery.searchable) FROM (
      --- The product with its category (1st level), and parent category (2nd level)
      SELECT 
        setweight(to_tsvector('simple',vn_unaccent(p.product_name)),'A') || 
        setweight(to_tsvector('simple',vn_unaccent(COALESCE(c1.category_name, ''))),'B') ||
        setweight(to_tsvector('simple',vn_unaccent(COALESCE(c2.category_name, ''))),'C') ||
        setweight(to_tsvector('simple',vn_unaccent(COALESCE(p.description, ''))),'D') AS searchable
      FROM product AS p
      JOIN category AS c1 ON p.category_id = c1.id
      LEFT JOIN category AS c2 ON c1.parent_id = c2.id
      WHERE p.id = update_product_id

      UNION ALL

      --- All of the product's variants
      SELECT 
        setweight(to_tsvector('simple',vn_unaccent(pv.variant_name)),'B') AS searchable
      FROM product_variant AS pv
      WHERE pv.product_id = update_product_id
    ) AS subquery
  )
  WHERE id = update_product_id;

  RETURN NULL;
END
$$
LANGUAGE 'plpgsql';

--- Update the price of order_variant to match the current variant price
CREATE OR REPLACE FUNCTION copy_price_order() RETURNS trigger AS
$$
BEGIN
  UPDATE "order_variant" AS ov
  SET ("variant_price") = (
    SELECT least("price", "discount_price")
    FROM "product_variant" AS pv
    WHERE pv.id = NEW.variant_id
  ) 
  WHERE ov.order_id = NEW.order_id AND ov.variant_id = NEW.variant_id;

  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

--- Remove variant from cart and order when soft delete product
CREATE OR REPLACE FUNCTION remove_variant_from_cart() RETURNS trigger AS
$$
BEGIN

  IF NEW.soft_delete = false THEN 
  RETURN null;
  END IF;

  --- Remove variant from all carts
  DELETE FROM cart_variant
  WHERE variant_id IN (
    SELECT product_variant.id
    FROM product_variant
    WHERE product_variant.product_id = NEW.id
  );

  return NULL;
END;
$$
LANGUAGE 'plpgsql';


--- Update current usage of voucher
CREATE OR REPLACE FUNCTION update_current_usage_voucher() RETURNS trigger AS
$$
BEGIN
  UPDATE "voucher"
  SET (current_usage) = (
    SELECT COALESCE(COUNT(*),0)
    FROM "voucher_user"
    WHERE voucher_user.voucher_code = NEW.voucher_code
  )
  WHERE voucher.voucher_code = NEW.voucher_code;
  RETURN NULL;
END;
$$
LANGUAGE 'plpgsql';

-------------------------- TRIGGER ------------------------------

--- Update min, max, stock of product after change variant
CREATE TRIGGER insert_variant
AFTER INSERT OR UPDATE OR DELETE
ON "product_variant"
FOR EACH ROW
EXECUTE PROCEDURE update_min_max_price_stock_product();

--- Update rating count and avg when review changes
CREATE TRIGGER insert_review
AFTER INSERT OR UPDATE OR DELETE
ON "review"
FOR EACH ROW
EXECUTE PROCEDURE update_rating_product_order_review();

--- Create cart after insert new account
CREATE TRIGGER insert_account
AFTER INSERT 
ON "account"
FOR EACH ROW
EXECUTE PROCEDURE create_cart_for_account();

--- Update total price after change cart variants
CREATE TRIGGER update_cart
AFTER INSERT OR UPDATE OR DELETE
ON "cart_variant"
FOR EACH ROW 
EXECUTE PROCEDURE update_total_count_cart();

--- Create status for order
CREATE TRIGGER create_order
AFTER INSERT
ON "order"
FOR EACH ROW
EXECUTE PROCEDURE create_order_pending_state();

--- Update product FTS data after insert or update product
CREATE TRIGGER update_product_fts
AFTER INSERT OR UPDATE
OF "product_name", "category_id", "description"
ON "product"
FOR EACH ROW 
EXECUTE PROCEDURE update_product_fts_column();

--- Update product FTS data after insert or update variant
CREATE TRIGGER update_product_variant_fts
AFTER INSERT OR DELETE OR UPDATE
OF "variant_name", "product_id"
ON "product_variant"
FOR EACH ROW 
EXECUTE PROCEDURE update_product_fts_column();

--- Update price of order_variant to match variant price
CREATE TRIGGER insert_order_variant_update_price
AFTER INSERT
ON "order_variant"
FOR EACH ROW
EXECUTE PROCEDURE copy_price_order();

--- Remove variants when delete product
CREATE TRIGGER delete_product
AFTER UPDATE
OF "soft_delete"
ON "product"
FOR EACH ROW
EXECUTE PROCEDURE remove_variant_from_cart();

--- Update voucher current usage
CREATE TRIGGER insert_voucher_user
AFTER INSERT
ON "voucher_user"
FOR EACH ROW
EXECUTE PROCEDURE update_current_usage_voucher();

----------------------- INSERT DATA -------------------------

COPY "province" FROM E'D:/git/huimitu-ecommerce/src/backend/database/data/province.csv' CSV DELIMITER ',';
COPY "district" FROM E'D:/git/huimitu-ecommerce/src/backend/database/data/district.csv' CSV DELIMITER ',';
COPY "ward" FROM E'D:/git/huimitu-ecommerce/src/backend/database/data/ward.csv' CSV DELIMITER ',';

--- Admin password: admin123
--- User password: user123
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('phuc16102001@gmail.com','MzkwNyY5ODhlOTFhNTM1MGMwN2E4NGViMThhOTljNzhjN2Q2Mzg3OTE3YzJmNzRiODU4MDU1Y2ZiMjE5YmE0NTA4NWU2','0707953475','Đỗ Vương Phúc','2001-10-16','male','admin',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('thanhhoang4869@gmail.com','NTgzMyYzNGQ3NWIzY2UwMTM4MDFjNmFiYjQ5ZjM0YzU5NDYwZGFjN2U4ZDc3MTU0ODNjZWMwZWI0ZjIyNzE1YmNmY2Zj','0933442607','Hoàng Như Thanh','2001-07-26','female','admin',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('nnhatdu@gmail.com','YTIwZCYyYWUyZmMxYmIyZDUwYzFlNDhkMzRkZjk5ZTZmYzg4YjM4ZDAwYzliNTU0MGViMWRiNWU4OTg4YjdmZjA4ZTE0','0987654321','Ngô Nhật Du',NULL,'female','admin',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('longmydu@gmail.com','ZDYxYyZhZjY5YmNhMGQ2YjkzMzZhNjZhYzk4MDBhMTcwZTE0OGQ5ZDRlYmRkMjA0NDE2ODc1MmIyOTAyN2NlNGU5OWM0','0987654322','Long Mỹ Du',NULL,'female','admin',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('nhkduy201@gmail.com','OThiNCYyZGQyNTA0N2Y0YmRhZTYwN2I2ZTc3YjA5OTAzZWJkY2QyZDdkOTE3ZDUxOTYxNTU4ODlhYjRiNDllNTZmNjE2','0987654323','Nguyễn Huỳnh Khánh Duy',NULL,'male','admin',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('user1@gmail.com','MGU0ZCZkMTljZWM3ZDRlNGRlZGQxYTRkYTdkYThmM2YzNWU2YTE1OTlkZmUyN2JhM2EyYjI5MzNkZWVjMzQ3OWRlYjVm','0987654324','User 1',NULL,'female','user',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('user2@gmail.com','OTgwMiZkYjhjMWQwZGFhOGJhNjBiMDJhOWUyZTVkOWI1MTkwMWI2N2MxZGYyYzJhMDE0ZjQ5MTVjMjczMWIxMjFlYTQ3','0987654325','User 2',NULL,'male','user',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('user3@gmail.com','OWQ3MiY5NjcxODhlNGU4Njk3YzkxMjc1ZmY0YTgwYTcxYmQzM2VjNDMzNGUzYTE2MGM5NzVjZDYyMWFhNTQ2YWMzNGM2','0987654326','User 3',NULL,'female','user',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('user4@gmail.com','NjM2NyZiM2FiYTI5OWFiN2RjN2IzNjVlMjIyNWI3ZjZkMDhmOTg5ZjY5M2ZhZDgyMDkyMGEyNWZkODRmMTI1OTg2OTI3','0987654327','User 4',NULL,'male','user',true);
INSERT INTO "account"("email","password","phone","fullname","birthday","gender","role","verified") VALUES('user5@gmail.com','NGI5MCZkZjQxYzY5YzE4ZjJhOGY4MDExOTU1NTI3MzNhY2Y3MzliYzc3Yjg5Y2Q2NDBhOWJmMjBmYWFiNDY3Y2Y2YWMw','0987654328','User 5',NULL,'female','user',true);

INSERT INTO "payment"("provider") VALUES('paypal');
INSERT INTO "payment"("provider") VALUES('momo');
INSERT INTO "payment"("provider") VALUES('cod');
INSERT INTO "payment"("provider") VALUES('nowpayment');

INSERT INTO "category"("parent_id","category_name","description") VALUES(NULL,'Dụng cụ trang trí',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES(NULL,'Dụng cụ làm bánh',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('1','Túi và đầu chiết',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('1','Giấy nến',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('1','Dụng cụ trang trí bánh kem',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('1','Khuôn bánh',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('1','Dụng cụ trang trí bánh quy',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('2','Khay nướng',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('2','Khuôn bánh muffin',NULL);
INSERT INTO "category"("parent_id","category_name","description") VALUES('2','Khuôn tạo hình',NULL);

INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Túi trang trí (10 cái) ','3','<div>Hãy cào một món ra khỏi danh sách dọn dẹp của bạn khi bạn sử dụng những chiếc túi trang trí dùng một lần này cho dự án làm bánh tiếp theo của mình. Hãy thử chúng có hoặc không có bộ ghép để trang trí bánh ngọt và bánh quy cho bạn. Chúng cũng rất tốt để nấu chảy các nguyên liệu trong lò vi sóng và đóng kẹo bằng tay. <br>Chi tiết: <div> <ul> <li> 16 "(40,6 cm) </li><li> 12 túi &nbsp; </li><li> Phù hợp với các mẹo và bộ ghép nối chuẩn </li><li> Bao gồm các hướng dẫn &nbsp; </li></ul> </div></div>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Đầu chiết Open Star','3','<div>Hoàn hảo để tạo ra các kỹ thuật ngôi sao chuyên nghiệp và thả hoa cũng như bánh nướng nhỏ phủ sương và trang trí bánh ngọt.<br>Chi tiết: <br><ul><li>1 triệu đầu sao hở</li><li>Vừa với túi và bộ ghép nối tiêu chuẩn</li></ul></div>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Túi trang trí có thể tái sử dụng (10 cái)','3','<div> <div> Cạo một món ra khỏi danh sách dọn dẹp của bạn khi bạn sử dụng những chiếc túi trang trí dùng một lần này cho dự án làm bánh tiếp theo của mình. Hãy thử chúng có hoặc không có bộ ghép nối cho nhu cầu trang trí của bạn. Chúng cũng rất tốt để nấu chảy các nguyên liệu trong lò vi sóng và đóng kẹo bằng tay. </div><div> &nbsp; </div><div> Chi tiết: </div><div> <ul> <li> 12 ( 30,48 cm) </li><li> Sẵn có với nhiều loại số lượng </li><li> Phù hợp với các mẹo và bộ ghép nối tiêu chuẩn </li><li> Có kèm theo hướng dẫn </li></ul> </div></ div >','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Đầu chiết hình bông hoa','3','<div>Trang trí bánh kẹo mềm và bánh quy đường của bạn một cách dễ dàng, sử dụng mẹo trang trí ngôi sao mở này từ Celebrate It. Nó có nhiều đường gờ, hoàn hảo để tạo ra hoa hồng, ngôi sao hoặc nấm cục đẹp mắt.Chi tiết: <br><ul><li> Tương thích với túi và bộ ghép nối tiêu chuẩn </li></ul></div>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Bộ đầu chiết Wilton','3','<div>Tạo nhiều kiểu trang trí băng giá với các mẹo thiết kế hoa thả này! Gói này bao gồm bốn mẹo thả hoa an toàn cho máy rửa chén bằng kim loại sẽ cho phép bạn tạo ra những chiếc bánh ngọt, bánh quy và các món ngọt khác trông rất chuyên nghiệp. <br>Chi tiết: <br><ul> <li> Bao gồm nhiều kiểu hoa thả </ li> <li> 4 mẹo </li><li> An toàn cho máy rửa bát </li><li> Kim loại </li></ul> Nội dung: <br><ul> <li> 1 mẹo (cỡ 225) < / li> <li> 1 mẹo (kích thước 129) </li><li> 1 mẹo (kích thước 109) </li><li> 1 mẹo (kích thước 190) </li></ul> <br></div>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Giấy nến chống đầu (36 miếng)','4','<div>Sử dụng giấy da chống dính này để lót chảo nướng và tấm bánh quy — một phương tiện thay thế không chứa chất béo và giảm một nửa thời gian dọn dẹp của bạn. Khi làm việc với bột, hãy cuộn nó ra giữa hai tờ giấy có thể tái sử dụng này để dễ dàng truyền không dính vào tờ cookie của bạn. &nbsp; An toàn với lò nướng lên đến 400 ° F, &nbsp; giấy này hoạt động tốt trong lò nướng thông thường, lò vi sóng và tủ đông. &nbsp; <br>Chi tiết: <br><ul> <li> Màu trắng </li><li> 1,25ft. x 80ft. (38,1cm x 24,3cm) </li><li> 100 mét vuông. </li></ul></div>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Giấy nến chống dầu chấm bi (36 miếng)','4','<p>Đặc điểm:<br>KÍCH THƯỚC CẮT TRƯỚC: Vui lòng kiểm tra thông tin về kích thước và độ tương thích trên hình ảnh về kích thước cụ thể mà bạn cần.<br>BỘ PHẬN LÀM HƠI CAO CẤP: Được làm từ 100% bột giấy thực phẩm, không độc hại, thân thiện với môi trường, 100% an toàn. Trong khi đó, nó không thấm dầu và không thấm nước.<br>KHÔNG NHẤP &amp; DỄ VỆ SINH: Giữ cho thịt xông khói, thịt gà, bánh mì, bánh bao, bánh bao luôn nguyên vẹn và đẹp mắt, không ảnh hưởng đến mùi vị của thực phẩm. Giữ cho nồi chiên không khí của bạn không có cặn thức ăn. Trình tiết kiệm nấu ăn!<br>CHỐNG NHIỆT: Nhiệt độ an toàn lên đến 250 ℃, làm cho lót giấy da của bạn còn nguyên vẹn trong quá trình nấu nướng. CẢNH BÁO: đảm bảo đặt thức ăn hoặc thứ gì đó lên trên tấm lót để tránh chúng bay đi hoặc bị đốt cháy bởi bộ phận làm nóng!<br>RẤT NHIỀU MÓN ĐÃ CHUẨN BỊ - Lót giấy da đục lỗ của chúng tôi được thiết kế chuyên nghiệp, Các lỗ đủ và thích hợp giúp tăng tốc độ lưu thông hơi nước trong nồi chiên không khí hoặc nồi hấp. </p>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Giấy nến bánh lễ (300 miếng)','4','<p> Mô tả Sản phẩm:<br>Giấy nướng bánh đa chức năng<br>Số lượng: 100 chiếc / gói<br>Kích thước: 20x30 cm, 25x35 cm, 30x40 cm<br>Chất liệu: Bột gỗ thô từ Cây Vân sam Châu Âu Phần Lan<br>Đặc trưng:<br>KHÔNG RẮC RỐI - Trang tính không thấm dầu mỡ, không thấm nước, chúng sẽ không bị rách hoặc ngấm nước.<br>KÍCH THƯỚC ĐÚNG ĐỂ NƯỚNG - Các tấm nướng đã cắt sẵn sẽ không bị quăn, dính hoặc cháy. Hoàn hảo để nướng bánh mì, bánh ngọt, bánh quy, bánh sừng bò, bánh ngọt, bánh nướng nhỏ, bánh sừng bò, bánh ngọt, bánh nướng nhỏ, bánh mì cuộn và hơn thế nữa.<br>ĐÓNG GÓI TIỆN LỢI - Tờ được đóng trong hộp tiện lợi, dễ dàng cất giữ mà không bị gấp hay rách.<br>SẴN SÀNG SỬ DỤNG - Giấy da tẩm dầu Silicone hai mặt gốc thực vật. Không cần phun thêm dầu lên tấm trước khi nướng.<br>NHIỆT ĐỘ - Chịu được nhiệt độ lên đến 250 ° C, có thể sử dụng trong 40 đến 60 phút.<br>THÂN THIỆN VỚI MÔI TRƯỜNG - Giấy nướng bánh có thể tái sử dụng tối đa 4 lần. </p>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Dao chà láng kem','5','<div> Sử dụng dao trộn có lưỡi góc cạnh này để làm mịn lớp đóng băng trên bánh hoặc nâng đồ trang trí bánh ra khỏi không gian làm việc và lên bánh của bạn. Nó có một tay cầm cong để điều khiển và thoải mái hơn. <br> Chi tiết: <br> <ul> <li> Màu xanh lam và màu bạc </li> <li> 9 "(22,86 cm) </ li > <li> An toàn cho máy rửa bát </li> <li> Polypropylene, cao su và thép </li> </ul> </div>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Dụng cụ xẻ bánh kem','5','<p>Dao Cắt Bánh Kem được làm bằng nhựa an toàn, dùng cắt bánh kem trong các dịp lễ noel, sinh nhật, đám cưới…<br>Thông tin sản phẩm:<br>Tên sản phẩm: Dao Cắt Bánh Kem<br>Chiều Dài: 22cm<br>Chất liệu: nhựa cứng<br>Xuất xứ: Việt Nam<br></p>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Thanh tre (230 cái)','5','<p> Features:<br>Size: Length:28cm/11inch; Diameter:2.5cm/0.98inch<br>Material: Wooden<br>Use: make pizza, bread, noodles, dumplings, etc.<br>Notice:<br>Due to the different monitor and light effect,the actual color maybe a slight different from the picture color.<br>Please allow 0.5-1cm differs due to manual measurement.<br>Included:<br>1 x Rolling Pin</p>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Dao lật bánh','5','<p>- Vật liệu chế tạo:&nbsp;thép không gỉ cao cấp, kích thước 10 cm x 6.4 cm</p><p>- Chuôi cầm dài 11 cm, làm bằng&nbsp;nhựa polypropylene mềm chịu nhiệt &gt; 180 độ C, màu trắng đục, cầm êm tay</p><p>- Chiều dài toàn bộ: 22.5 cm</p><p>Xúc lật thực phẩm chiên rán trên chảo</p><p>Trọng lượng 300 gram</p><p>Kích thước đóng gói 25 cm x 10 cm x 6 cm&nbsp;</p><p>Hãng sản xuất: Dexter Russell</p><p>Sản xuất tại Mỹ</p><p>Nơi nhập khẩu: Mỹ</p>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Dao cắt bánh','5','<p>Dao cắt bánh răng cưa là một dụng cụ làm bánh không thể thiếu đối với chị em yêu thích làm bánh. Dao thường được dùng để cắt xẻ bánh mì, bánh kem, bánh gato,…giúp cho bề mặt cắt mịn phẳng, không bị vụn bánh.</p><p>Bánh mới lấy khỏi lò rất nóng, lưỡi dao thường cắt làm nham nhở bánh, khiến bánh bị lõm, khó cho đoạn trang trí về sau. Dao cắt bánh mì có răng cưa với lưỡi dao dài tới 25cm nên phù hợp với các bánh có đường kính to như gato, bông lan (15cm trở lên). Trong khi lưỡi dao thường không thể làm điều này.</p><p>Dao cắt bánh được làm từ thép không gỉ - không những dễ lau chùi, bảo quản mà còn lâu bền với thời gian và an toàn khi tiếp xúc với thực phẩm.</p><p>Cán gỗ chắc chắn, cầm vừa vặn và chắc tay – Dao cắt bánh mì là vật dụng rất cần thiết cho gia đình.</p>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Khuôn bánh tròn','8','<p>Khuôn bánh tròn 30cm được làm bằng nhôm, dùng làm bánh bông lan tròn, dễ dàng vệ sinh khuôn sau khi nướng bánh.</p><p>Tên sản phẩm: Khuôn bánh tròn</p><p>Chất liệu: nhôm</p><p>Kích thước: chiều cao: 8cm, đường kính : 30cm</p><p>Xuất xứ: Việt Nam</p>','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Khuôn bánh chống dính hình trái tim','10','Xuất xứ: Việt Nam<br>Hạn sử dụng: 12 tháng<br>Thành Phần: Inox<br>Đóng gói: Kích thước lần lượt từ lớn tới nhỏ (chiều cao 3cm): 7.5cm x 3cm / 6.5cm x 3cm /5.5cm x 3cm / 4.5cm x 3cm / 3.5cm x 3cm.','0','0');
INSERT INTO "product"("product_name","category_id","description","avg_rating","count_rating") VALUES('Khay cuộn bánh không dính','9','<p>Phong cách mới lạ, đẹp, không độc hại và có độ đàn hồi tốt.</p><p>Được làm bằng Silicone dùng cho thực phẩm, thân thiện với môi trường, nhiệt độ thấp và điện trở nhiệt cao.</p><p>Nó chủ yếu được sử dụng để làm bánh bánh cuộn, và có thể được sử dụng để tái chế.</p><p>Tên sản phẩm: Thảm bánh cuộn</p><p>Chất liệu: cao su silicon</p><p>Điện trở nhiệt: -50-220 độ C</p><p>Tính năng: Thân thiện với môi trường, bền, mới lạ</p><p>Kích thước lớn: 36cm x 28cm x 1.5cm/14.17 "x 11.02" x 0.59 "(xấp xỉ)</p><p>Kích thước nhỏ: 30cm x 25cm x 1.5cm/11.81 "x 9.84" x 0.59 "(xấp xỉ)</p>','0','0');

INSERT INTO "product_image"("product_id", "path", "filename") VALUES(1,'https://res.cloudinary.com/phuc16102001/image/upload/v1658811997/huimitu/product/ovvxrgiyj7ioxcv8pjxq.webp','huimitu/product/ovvxrgiyj7ioxcv8pjxq');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(1,'https://res.cloudinary.com/phuc16102001/image/upload/v1658811997/huimitu/product/opekkwjpy4gotsnryg4g.jpg','huimitu/product/opekkwjpy4gotsnryg4g');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(2,'https://res.cloudinary.com/phuc16102001/image/upload/v1658812916/huimitu/product/nojwq2qlo6j79ujr7kdk.webp','huimitu/product/nojwq2qlo6j79ujr7kdk');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(2,'https://res.cloudinary.com/phuc16102001/image/upload/v1658812916/huimitu/product/cg3bpxdebihgomklu4hp.webp','huimitu/product/cg3bpxdebihgomklu4hp');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(3,'https://res.cloudinary.com/phuc16102001/image/upload/v1658812940/huimitu/product/k0qhoegab3hsgbubix9a.webp','huimitu/product/k0qhoegab3hsgbubix9a');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(3,'https://res.cloudinary.com/phuc16102001/image/upload/v1658812939/huimitu/product/jiitpvpw4js5vku19q1c.webp','huimitu/product/jiitpvpw4js5vku19q1c');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(4,'https://res.cloudinary.com/phuc16102001/image/upload/v1658812951/huimitu/product/bobx4r9i1adwctzc94p3.webp','huimitu/product/bobx4r9i1adwctzc94p3');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(4,'https://res.cloudinary.com/phuc16102001/image/upload/v1658812951/huimitu/product/xkfgtlpannb9eyhy8ymb.webp','huimitu/product/xkfgtlpannb9eyhy8ymb');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(5,'https://res.cloudinary.com/phuc16102001/image/upload/v1658812961/huimitu/product/nh4wx4x8tpwzgqhrifwv.webp','huimitu/product/nh4wx4x8tpwzgqhrifwv');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(6,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813036/huimitu/product/lbz3lim0dihml6ibiddl.webp','huimitu/product/lbz3lim0dihml6ibiddl');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(6,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813036/huimitu/product/qnchwo3pba77banhhyya.webp','huimitu/product/qnchwo3pba77banhhyya');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(6,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813036/huimitu/product/drvse3psaxs9vt09v0jw.webp','huimitu/product/drvse3psaxs9vt09v0jw');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(6,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813036/huimitu/product/lnb0pfunslecqkplyve4.jpg','huimitu/product/lnb0pfunslecqkplyve4');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(6,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813036/huimitu/product/yys5yd6hbfeihsbusfgg.webp','huimitu/product/yys5yd6hbfeihsbusfgg');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(6,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813035/huimitu/product/jxjo4y2xaiylx0rhiflz.webp','huimitu/product/jxjo4y2xaiylx0rhiflz');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(6,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813036/huimitu/product/ob5z6jd3xkvlfgejlhmj.webp','huimitu/product/ob5z6jd3xkvlfgejlhmj');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(6,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813035/huimitu/product/jct8gcxsj1g5xlqztmod.webp','huimitu/product/jct8gcxsj1g5xlqztmod');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(7,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813139/huimitu/product/elypbm1drzcv7n66gdxl.webp','huimitu/product/elypbm1drzcv7n66gdxl');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(7,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813139/huimitu/product/hkumu3muubwszyikzqw7.webp','huimitu/product/hkumu3muubwszyikzqw7');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(7,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813140/huimitu/product/muw2pcxax3fln54dzi7t.webp','huimitu/product/muw2pcxax3fln54dzi7t');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(7,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813140/huimitu/product/nx5dgljojros7tbaybdo.jpg','huimitu/product/nx5dgljojros7tbaybdo');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(7,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813139/huimitu/product/pc6inagf5i3iqpnfw5my.webp','huimitu/product/pc6inagf5i3iqpnfw5my');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(7,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813139/huimitu/product/rnzfpuqbit2ansjfb0jy.jpg','huimitu/product/rnzfpuqbit2ansjfb0jy');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(7,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813140/huimitu/product/zpij5samek6lfcctb8a7.webp','huimitu/product/zpij5samek6lfcctb8a7');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(7,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813139/huimitu/product/lyl2l6jlt9mppeezdy0l.jpg','huimitu/product/lyl2l6jlt9mppeezdy0l');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(8,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813154/huimitu/product/ctrpsie2jehpj6gcmgry.webp','huimitu/product/ctrpsie2jehpj6gcmgry');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(9,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813165/huimitu/product/dyi9gv8unclimvntxwud.webp','huimitu/product/dyi9gv8unclimvntxwud');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(9,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813165/huimitu/product/x9be1o8viypbu831imji.webp','huimitu/product/x9be1o8viypbu831imji');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(9,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813165/huimitu/product/i3ubbiszcvovs5sw8plz.webp','huimitu/product/i3ubbiszcvovs5sw8plz');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(10,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813176/huimitu/product/zxqgozucbaqhmvpwcs4t.webp','huimitu/product/zxqgozucbaqhmvpwcs4t');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(10,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813176/huimitu/product/tmqffzlynteciavegmsl.webp','huimitu/product/tmqffzlynteciavegmsl');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(10,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813176/huimitu/product/dcwqqnnxz2dziahtmzmz.webp','huimitu/product/dcwqqnnxz2dziahtmzmz');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(10,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813177/huimitu/product/js3mtjbfslfvvbrlbicr.webp','huimitu/product/js3mtjbfslfvvbrlbicr');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(11,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813187/huimitu/product/yovu7hwvetfxrj3tizlb.webp','huimitu/product/yovu7hwvetfxrj3tizlb');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(11,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813187/huimitu/product/jdjhjlifcwchrabf4gsd.webp','huimitu/product/jdjhjlifcwchrabf4gsd');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(11,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813187/huimitu/product/cqi6zqairjtnb7hbao91.webp','huimitu/product/cqi6zqairjtnb7hbao91');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(12,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813201/huimitu/product/vn9koh75prpvjske08ae.webp','huimitu/product/vn9koh75prpvjske08ae');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(12,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813201/huimitu/product/z1vk5or1fxtgtxexdcc7.webp','huimitu/product/z1vk5or1fxtgtxexdcc7');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(13,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813211/huimitu/product/xiosvh2jnjjdnnaxtaz2.webp','huimitu/product/xiosvh2jnjjdnnaxtaz2');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(13,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813211/huimitu/product/gyxmumv9ohadhedthdmr.webp','huimitu/product/gyxmumv9ohadhedthdmr');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(13,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813211/huimitu/product/blpjsq5s1vkwdswz9v6h.webp','huimitu/product/blpjsq5s1vkwdswz9v6h');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(14,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813221/huimitu/product/q20kyu15apwolovbdaq6.webp','huimitu/product/q20kyu15apwolovbdaq6');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(14,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813221/huimitu/product/ncq6yv3km3mdwhbzjl1z.webp','huimitu/product/ncq6yv3km3mdwhbzjl1z');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(14,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813221/huimitu/product/a36spdexfn66y5cs7x5d.webp','huimitu/product/a36spdexfn66y5cs7x5d');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(14,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813221/huimitu/product/emzhcca33tdyccael0sy.webp','huimitu/product/emzhcca33tdyccael0sy');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(15,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813232/huimitu/product/uegt43y6o2ttaxtubw9q.webp','huimitu/product/uegt43y6o2ttaxtubw9q');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(15,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813232/huimitu/product/cheqppegsf1w0szwe9j1.webp','huimitu/product/cheqppegsf1w0szwe9j1');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(15,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813232/huimitu/product/tas3q86w9aiuiwjxv7at.webp','huimitu/product/tas3q86w9aiuiwjxv7at');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(16,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813243/huimitu/product/zp6d71e6rvypqhyfr0vb.webp','huimitu/product/zp6d71e6rvypqhyfr0vb');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(16,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813243/huimitu/product/revg2p4f2t1fndugie4m.webp','huimitu/product/revg2p4f2t1fndugie4m');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(16,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813243/huimitu/product/m2vntdewkjjqmexrzeu7.webp','huimitu/product/m2vntdewkjjqmexrzeu7');
INSERT INTO "product_image"("product_id", "path", "filename") VALUES(16,'https://res.cloudinary.com/phuc16102001/image/upload/v1658813243/huimitu/product/au5nnrulwe40cotcxbcx.webp','huimitu/product/au5nnrulwe40cotcxbcx');

INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('1','Túi trang trí (10 cái) đen','20000',NULL,'3');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('1','Túi trang trí (10 cái) trắng','25000',NULL,'5');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('1','Túi trang trí (10 cái) xanh','23000',NULL,'2');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('2','Đầu chiết Open Star','35000',NULL,'10');

INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('3','Túi trang trí có thể tái sử dụng (10 cái)','32000',NULL,'20');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('4','Đầu chiết hình bông hoa','15000',NULL,'15');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('5','Bộ đầu chiết Wilton','260000',NULL,'30');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('6','Giấy nến chống đầu cam (36 miếng)','80000','70000','5');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('6','Giấy nến chống đầu đen (36 miếng)','80000','70000','4');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('6','Giấy nến chống đầu vàng (36 miếng)','80000','70000','3');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('6','Giấy nến chống đầu trắng (36 miếng)','80000','70000','1');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('7','Giấy nến chống dầu chấm bi hồng (36 miếng)','85000',NULL,'5');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('7','Giấy nến chống dầu chấm bi đỏ (36 miếng)','85000',NULL,'8');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('7','Giấy nến chống dầu chấm bi xanh dương (36 miếng)','85000',NULL,'7');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('7','Giấy nến chống dầu chấm bi xanh lá (36 miếng)','85000',NULL,'8');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('8','Giấy nến bánh lễ (300 miếng)','400000','390000','50');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('9','Dao chà láng kem','270000','250000','20');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('10','Dụng cụ xẻ bánh kem','280000',NULL,'15');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('11','Thanh tre (230 cái)','77000','70000','3');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('12','Dao lật bánh','220000','180000','5');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('13','Dao cắt bánh','20000',NULL,'19');

INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('14','Khuôn bánh tròn 6" x 2"','180000','110000','10');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('14','Khuôn bánh tròn 12" x 2"','350000','160000','5');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('14','Khuôn bánh tròn 16" x 2"','270000','100000','4');

INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('15','Khuôn bánh chống dính hình trái tim','230000',NULL,'41');
INSERT INTO "product_variant"("product_id","variant_name","price","discount_price","stock") VALUES('16','Khay cuộn bánh không dính','120000','100000','29');

INSERT INTO "voucher"("voucher_code","percentage_discount","minimum_price","maximum_discount_price","end_date") VALUES('TET30',10,100000,15000,'2023-01-01');
INSERT INTO "voucher"("voucher_code","percentage_discount","minimum_price","maximum_discount_price","end_date") VALUES('DEAL77',15,50000,10000,'2023-01-01');

INSERT INTO "shipping_address"("email","province_id","district_id","ward_id","address", "long", "lat") VALUES('nhkduy201@gmail.com',1,1,1,'113 Đường Nguyễn Văn Cừ',106.62077984266271, 10.724669221658448);
INSERT INTO "shipping_address"("email","province_id","district_id","ward_id","address", "long", "lat") VALUES('phuc16102001@gmail.com',79,774,27301,'227 Nguyễn Văn Cừ',106.62077984266271, 10.724669221658448);

INSERT INTO "order"("id","email","payment_id","shipping_address_id","final_price","shipping_price", "reviewed") VALUES(1, 'nhkduy201@gmail.com', 1, 1, 100000, 15000, true);
INSERT INTO "order"("id","email","payment_id","shipping_address_id","final_price","shipping_price", "reviewed") VALUES(2, 'nhkduy201@gmail.com', 1, 1, 150000, 10000, false);
INSERT INTO "order"("id","email","payment_id","shipping_address_id","final_price","shipping_price", "reviewed") VALUES(3, 'nhkduy201@gmail.com', 1, 1, 200000, 5000, false);

INSERT INTO "order_variant"("order_id","variant_id","quantity") VALUES(1, 1, 3);
INSERT INTO "order_variant"("order_id","variant_id","quantity") VALUES(1, 3, 2);
INSERT INTO "order_variant"("order_id","variant_id","quantity") VALUES(1, 4, 4);
INSERT INTO "order_variant"("order_id","variant_id","quantity") VALUES(1, 5, 5);
INSERT INTO "order_variant"("order_id","variant_id","quantity") VALUES(2, 2, 1);
INSERT INTO "order_variant"("order_id","variant_id","quantity") VALUES(2, 6, 1);
INSERT INTO "order_variant"("order_id","variant_id","quantity") VALUES(3, 2, 4);
INSERT INTO "order_variant"("order_id","variant_id","quantity") VALUES(3, 4, 1);
INSERT INTO "order_variant"("order_id","variant_id","quantity") VALUES(3, 5, 2);
INSERT INTO "order_variant"("order_id","variant_id","quantity") VALUES(3, 9, 3);

INSERT INTO "order_state"("order_id","state") VALUES(1, 'pending');
SELECT pg_sleep(1);
INSERT INTO "order_state"("order_id","state") VALUES(1, 'shipping');
SELECT pg_sleep(1);
INSERT INTO "order_state"("order_id","state") VALUES(1, 'success');

INSERT INTO "order_state"("order_id","state") VALUES(2, 'cancel');

INSERT INTO "order_state"("order_id","state") VALUES(3, 'pending');
SELECT pg_sleep(1);
INSERT INTO "order_state"("order_id","state") VALUES(3, 'shipping');

INSERT INTO "review"("product_variant_id","order_id","rating","comment") VALUES(1,1,5,'This is the first comment!');
INSERT INTO "review"("product_variant_id","order_id","rating","comment") VALUES(1,2,1,'This is the second comment!');
INSERT INTO "review"("product_variant_id","order_id","rating","comment") VALUES(1,3,3,'This is the third comment!');